import React, { useState, useEffect } from 'react';
import { mockDonors } from '../data/mockDonors';
import './DonorSearchPage.css';

const DonorSearchPage = () => {
  const [searchQuery, setSearchQuery] = useState('');
  const [bloodGroup, setBloodGroup] = useState('');
  const [location, setLocation] = useState('');
  const [isRegistering, setIsRegistering] = useState(false);
  const [donors, setDonors] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [donorForm, setDonorForm] = useState({
    name: '',
    email: '',
    phoneNumber: '',
    bloodGroup: '',
    location: '',
    lastDonated: ''
  });

  // Load mock donors on component mount
  useEffect(() => {
    loadMockDonors();
  }, []);

  const loadMockDonors = () => {
    setIsLoading(true);
    // Simulate network delay
    setTimeout(() => {
      setDonors(mockDonors);
      setIsLoading(false);
    }, 1000);
  };

  // Filter donors based on search criteria
  const filteredDonors = donors.filter(donor => {
    const matchesSearch = !searchQuery || 
      donor.full_name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      donor.location.toLowerCase().includes(searchQuery.toLowerCase());
    
    const matchesBloodGroup = !bloodGroup || donor.blood_type === bloodGroup;
    
    const matchesLocation = !location || 
      donor.location.toLowerCase().includes(location.toLowerCase());
    
    return matchesSearch && matchesBloodGroup && matchesLocation;
  });

  const handleSearch = (e) => {
    e.preventDefault();
    // The filtering is already handled by the useEffect hook
  };

  const handleRegister = (e) => {
    e.preventDefault();
    
    // Create new donor object
    const newDonor = {
      id: donors.length + 1,
      full_name: donorForm.name,
      blood_type: donorForm.bloodGroup,
      age: parseInt(donorForm.age) || null,
      location: donorForm.location,
      email: donorForm.email || null,
      contact: donorForm.phoneNumber || null,
      last_donation_date: donorForm.lastDonated || null,
      availability: 'Available'
    };

    // Add new donor to the list
    setDonors([...donors, newDonor]);
    
    // Reset form and close modal
    setIsRegistering(false);
    setDonorForm({
      name: '',
      email: '',
      phoneNumber: '',
      bloodGroup: '',
      location: '',
      lastDonated: ''
    });
    
    // Show success message
    alert('Donor registered successfully!');
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setDonorForm(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const bloodGroups = ['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-'];

  return (
    <div className="donor-page">
      <div className="container">
        <header className="donor-header">
          <div className="header-content">
            <h1>Find Blood Donors</h1>
            <p>Search from our database of {donors.length} registered donors</p>
          </div>
        </header>

        <section className="search-section">
          <div className="search-container">
            <h2>Search for Donors</h2>
            <form onSubmit={handleSearch} className="search-form">
              <div className="search-inputs">
                <div className="input-group">
                  <label htmlFor="searchQuery">Search by name or location</label>
                  <input
                    type="text"
                    id="searchQuery"
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    placeholder="Enter name or location..."
                    className="search-input"
                  />
                </div>
                
                <div className="input-group">
                  <label htmlFor="bloodGroup">Blood Group</label>
                  <select
                    id="bloodGroup"
                    value={bloodGroup}
                    onChange={(e) => setBloodGroup(e.target.value)}
                    className="search-input"
                  >
                    <option value="">All Blood Groups</option>
                    {bloodGroups.map(group => (
                      <option key={group} value={group}>{group}</option>
                    ))}
                  </select>
                </div>
                
                <div className="input-group">
                  <label htmlFor="location">Location</label>
                  <input
                    type="text"
                    id="location"
                    value={location}
                    onChange={(e) => setLocation(e.target.value)}
                    placeholder="Enter city or state..."
                    className="search-input"
                  />
                </div>
              </div>
            </form>
          </div>
        </section>

        <section className="results-section">
          <div className="results-header">
            <h3>Available Donors ({filteredDonors.length})</h3>
            <button 
              onClick={() => setIsRegistering(true)}
              className="btn btn-secondary"
            >
              ‚ûï Register as Donor
            </button>
          </div>
          
          {isLoading ? (
            <div className="loading-container">
              <div className="loading-spinner"></div>
              <p>Loading donors...</p>
            </div>
          ) : (
            <div className="donors-grid">
              {filteredDonors.length > 0 ? (
                filteredDonors.map(donor => (
                  <div key={donor.id} className="donor-card">
                    <div className="donor-avatar">
                      <div className="avatar-initial">
                        {donor.full_name?.split(' ').map(n => n[0]).join('') || 'D'}
                      </div>
                      <div className="availability-badge">
                        üü¢ {donor.availability || 'Available'}
                      </div>
                    </div>
                    
                    <div className="donor-info">
                      <h3>{donor.full_name || 'Anonymous Donor'}</h3>
                      <div className="donor-details">
                        <span className="blood-type">{donor.blood_type}</span>
                        <span className="location">üìç {donor.location}</span>
                        {donor.age && <span className="age">Age: {donor.age}</span>}
                        {donor.last_donation_date && (
                          <span className="last-donation">
                            Last donation: {new Date(donor.last_donation_date).toLocaleDateString()}
                          </span>
                        )}
                      </div>
                    </div>

                    <div className="donor-contact">
                      <button 
                        onClick={() => window.location.href = `tel:${donor.contact}`}
                        className="btn btn-primary"
                      >
                        üìû Call
                      </button>
                      <button 
                        onClick={() => window.location.href = `mailto:${donor.email}`}
                        className="btn btn-secondary"
                      >
                        ‚úâÔ∏è Email
                      </button>
                    </div>
                  </div>
                ))
              ) : (
                <div className="no-results">
                  <div className="no-results-icon">üîç</div>
                  <h3>No donors found</h3>
                  <p>
                    {searchQuery || bloodGroup || location 
                      ? 'Try adjusting your search criteria or register as a donor to help others.'
                      : 'No donors are currently registered. Be the first to register and help save lives!'
                    }
                  </p>
                </div>
              )}
            </div>
          )}
        </section>

        {/* Modal for donor registration */}
        {isRegistering && (
          <div className="modal-overlay" onClick={() => setIsRegistering(false)}>
            <div className="modal-content" onClick={e => e.stopPropagation()}>
              <div className="modal-header">
                <h2>Register as a Donor</h2>
                <button 
                  onClick={() => setIsRegistering(false)}
                  className="close-btn"
                >
                  ‚úï
                </button>
              </div>
              
              <form onSubmit={handleRegister} className="registration-form">
                <div className="form-grid">
                  <div className="form-group">
                    <label htmlFor="name">Full Name *</label>
                    <input
                      type="text"
                      id="name"
                      name="name"
                      value={donorForm.name}
                      onChange={handleInputChange}
                      required
                      className="form-input"
                    />
                  </div>
                  
                  <div className="form-group">
                    <label htmlFor="email">Email</label>
                    <input
                      type="email"
                      id="email"
                      name="email"
                      value={donorForm.email}
                      onChange={handleInputChange}
                      className="form-input"
                    />
                  </div>
                  
                  <div className="form-group">
                    <label htmlFor="phoneNumber">Phone Number *</label>
                    <input
                      type="tel"
                      id="phoneNumber"
                      name="phoneNumber"
                      value={donorForm.phoneNumber}
                      onChange={handleInputChange}
                      required
                      className="form-input"
                    />
                  </div>
                  
                  <div className="form-group">
                    <label htmlFor="donorBloodGroup">Blood Group *</label>
                    <select
                      id="donorBloodGroup"
                      name="bloodGroup"
                      value={donorForm.bloodGroup}
                      onChange={handleInputChange}
                      required
                      className="form-input"
                    >
                      <option value="">Select Blood Group</option>
                      {bloodGroups.map(group => (
                        <option key={group} value={group}>{group}</option>
                      ))}
                    </select>
                  </div>
                  
                  <div className="form-group">
                    <label htmlFor="donorLocation">Location *</label>
                    <input
                      type="text"
                      id="donorLocation"
                      name="location"
                      value={donorForm.location}
                      onChange={handleInputChange}
                      placeholder="City, State"
                      required
                      className="form-input"
                    />
                  </div>
                  
                  <div className="form-group">
                    <label htmlFor="lastDonated">Last Donation Date</label>
                    <input
                      type="date"
                      id="lastDonated"
                      name="lastDonated"
                      value={donorForm.lastDonated}
                      onChange={handleInputChange}
                      className="form-input"
                    />
                  </div>
                </div>
                
                <div className="form-actions">
                  <button type="button" onClick={() => setIsRegistering(false)} className="btn btn-outline">
                    Cancel
                  </button>
                  <button type="submit" className="btn btn-primary">
                    Register as Donor
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default DonorSearchPage;
